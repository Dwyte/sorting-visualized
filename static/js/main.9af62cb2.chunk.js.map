{"version":3,"sources":["contexts/IsPlayingContext.ts","components/common/Button.ts","components/PlayerControl/styles.ts","components/PlayerControl/PlayerControl.tsx","constants.ts","components/Visualizer/style.ts","components/Visualizer/AlgorithmSelection.tsx","components/Graph/styles.ts","components/Graph/Graph.tsx","components/Visualizer/Visualizer.tsx","sortingAlgorithms.ts","utilities.ts","styles.ts","components/common/Anchor.tsx","components/Select/Select.tsx","components/Header/style.ts","components/Header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["IsPlayingContext","React","createContext","Button","styled","button","isActive","padding","isIconLarge","css","ButtonFlexGroup","div","Container","StepButton","StepProgress","input","PlayerControl","currentStep","totalSteps","onPrevious","onPlay","onPause","onNext","onChangeSlider","isPlaying","useContext","onClick","disabled","className","type","min","max","value","onChange","sortingAlgorithms","playSpeedConfigs","playSpeed","playStepSize","playStepIntervalMS","visualizerCountSelectOptions","label","arraySizeConfigs","arraySize","actualSize","arraySizeSelectOptions","map","algorithm","arraySizeConfig","arrayVariationSelectOptions","arrayVariation","playSpeedSelectOptions","playSpeedConfig","GraphContainer","AlgorithmSelect","AlgorithmOption","AlgorithmSelection","activeAlgorithm","useState","isSelecting","setIsSelecting","inActiveAlgorithms","filter","handleOptionClick","event","target","onMouseLeave","undefined","BarItem","color","Graph","data","bar","index","Visualizer","sortingSteps","sortingAlgorithm","onSelectAlgorithm","Math","length","deepCopyArray","arrayToCopy","insertionSort","arrayToSort","arrayToSortCopy","n","i","j","comparisonStep","push","temp","bubbleSort","swapStep","selectionSort","minimum","Infinity","minimumIndex","mergeSort","merge","array","low","mid","high","mergedArray","toA","toB","compareStep","currentA","currentB","copyStep","k","sort","from","to","floor","quickSort","sortedArray","startIndex","endIndex","partitionIndex","pivot","pivotStep","currBar","beforePartSwapStep","partSwapStep","partition","forEach","generateRandomGraphData","emptySizedArray","Array","fill","valueMultiplier","round","random","arrayToShuffle","shuffledArray","element","_","randomIndex","shuffleArray","reverse","nearlyArray","randomRange","randomTotalRange","newIndex","Error","Main","main","VisualizersGrid","visualizerCount","A","a","hasLabel","Anchor","href","faClassName","Boolean","SelectLabel","h2","Select","title","faIcon","options","activeOption","option","HeaderContainer","header","TitleH1","h1","SubtitleH2","HeaderControlsContainer","Space","Header","onRandom","onReset","onChangeVisualizerCount","onChangeArraySize","onChangeArrayVariation","onChangePlaySpeed","App","dataToSort","setDataToSort","allSortingSteps","setAllSortingSteps","setCurrentSortStep","activeAlgorithms","setActiveAlgorithms","setPlaySpeedConfig","playTimeout","setPlayTimeout","setArraySizeConfig","setArrayVariation","useMemo","maxLength","useEffect","newAllSortingSteps","generateSoringSteps","currentPlayTimeout","clearTimeout","moveGraphDataStep","stepSize","currentGraphDataStep","newGraphDataStep","handlePause","clearInterval","Provider","newPlaySpeed","newPlaySpeedConfig","find","config","setInterval","newVisualizerCount","currentActiveAlgorithms","changeVisualizerCount","newArraySize","newArraySizeConfig","newArrayVariation","visualizerIndex","stateCopy","parseInt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9af62cb2.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const IsPlayingContext = React.createContext<boolean>(false);\n","import styled, { css } from \"styled-components\";\n\ninterface ButtonProps {\n  isActive?: boolean;\n  padding?: \"regular\" | \"large\";\n  isIconLarge?: boolean;\n}\n\nexport const Button = styled.button<ButtonProps>`\n  font-size: 0.8rem;\n  cursor: pointer;\n  margin: 0;\n  border: 0;\n\n  :hover:not(:disabled) {\n    background-color: #333;\n    color: white;\n  }\n\n  :disabled {\n    cursor: initial;\n    color: #777;\n  }\n\n  background-color: ${({ isActive = true }) => (isActive ? \"#222\" : \"#111\")};\n  color: ${({ isActive = true }) => (isActive ? \"#fff\" : \"#ccc\")};\n  padding: ${({ padding = \"regular\" }) =>\n    padding === \"regular\" ? \"0.5rem\" : \"0.75rem\"};\n\n  ${({ isIconLarge = false }) =>\n    isIconLarge &&\n    css`\n      i {\n        display: block;\n        font-size: 1.25rem;\n        margin-bottom: 0.25rem;\n      }\n    `}\n`;\n\nexport const ButtonFlexGroup = styled.div`\n  display: flex;\n  gap: 0.25rem;\n  button {\n    flex: 1;\n  }\n`;\n","import styled from \"styled-components\";\nimport { Button } from \"../common/Button\";\n\nexport const Container = styled.div`\n  display: flex;\n  gap: 0.25rem;\n`;\n\nexport const StepButton = styled(Button)`\n  padding: 0.5rem 1.5rem;\n`;\n\nexport const StepProgress = styled.input`\n  background-color: #222;\n  appearance: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n  flex: 1;\n\n  // for firefox\n  ::-moz-range-thumb {\n    -moz-appearance: none;\n    border-radius: 0;\n    border: none;\n    height: 100%;\n    width: 20px;\n\n    :hover {\n      background: orange;\n    }\n  }\n\n  // for chrome and safari\n  ::-webkit-slider-runnable-track {\n    height: 100%;\n  }\n\n  ::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    background: white;\n    height: 100%;\n    width: 20px;\n\n    :hover {\n      background: orange;\n    }\n  }\n`;\n","import { useContext } from \"react\";\n\nimport { IsPlayingContext } from \"../../contexts/IsPlayingContext\";\nimport { StepProgress, Container, StepButton } from \"./styles\";\n\ninterface Props {\n  currentStep: number;\n  totalSteps: number;\n  onPrevious: React.MouseEventHandler<HTMLButtonElement>;\n  onPlay: React.MouseEventHandler<HTMLButtonElement>;\n  onPause: React.MouseEventHandler<HTMLButtonElement>;\n  onNext: React.MouseEventHandler<HTMLButtonElement>;\n  onChangeSlider: React.ChangeEventHandler<HTMLInputElement>;\n}\n\nexport const PlayerControl: React.FC<Props> = ({\n  currentStep,\n  totalSteps,\n  onPrevious,\n  onPlay,\n  onPause,\n  onNext,\n  onChangeSlider,\n}) => {\n  const isPlaying: boolean = useContext(IsPlayingContext);\n\n  return (\n    <Container>\n      <StepButton onClick={onPrevious} disabled={isPlaying}>\n        <i className=\"fas fa-step-backward\"></i>\n      </StepButton>\n\n      {isPlaying && (\n        <StepButton onClick={onPause}>\n          <i className=\"fas fa-pause\"></i>\n        </StepButton>\n      )}\n\n      {!isPlaying && (\n        <StepButton onClick={onPlay}>\n          <i className=\"fas fa-play\"></i>\n        </StepButton>\n      )}\n\n      <StepButton onClick={onNext} disabled={isPlaying}>\n        <i className=\"fas fa-step-forward\"></i>\n      </StepButton>\n\n      <StepProgress\n        type=\"range\"\n        min={0}\n        max={totalSteps - 1}\n        value={currentStep}\n        onChange={onChangeSlider}\n      />\n    </Container>\n  );\n};\n","import {\n  ArraySizeConfig,\n  ArrayVariation,\n  PlaySpeed,\n  PlaySpeedConfig,\n  SelectOption,\n  SortingAlgorithm,\n  VisualizerCount,\n} from \"./types\";\n\nexport const sortingAlgorithms: SortingAlgorithm[] = [\n  \"Quick\",\n  \"Merge\",\n  \"Bubble\",\n  \"Insertion\",\n  \"Selection\",\n];\n\nexport const playSpeeds: PlaySpeed[] = [1, 2, 3, 4, 5];\n\nexport const playSpeedConfigs: PlaySpeedConfig[] = [\n  {\n    playSpeed: 1,\n    playStepSize: 1,\n    playStepIntervalMS: 500,\n  },\n  {\n    playSpeed: 2,\n    playStepSize: 1,\n    playStepIntervalMS: 200,\n  },\n  {\n    playSpeed: 3,\n    playStepSize: 1,\n    playStepIntervalMS: 50,\n  },\n  {\n    playSpeed: 4,\n    playStepSize: 2,\n    playStepIntervalMS: 25,\n  },\n  {\n    playSpeed: 5,\n    playStepSize: 3,\n    playStepIntervalMS: 10,\n  },\n];\n\nexport const visualizerCountSelectOptions = [\n  { label: \"Single\", value: 1 },\n  { label: \"Double\", value: 2 },\n  { label: \"Quadruple\", value: 4 },\n];\n\nexport const arraySizeConfigs: ArraySizeConfig[] = [\n  { arraySize: \"Small\", actualSize: 10 },\n  { arraySize: \"Medium\", actualSize: 25 },\n  { arraySize: \"Large\", actualSize: 50 },\n];\n\nexport const arrayVariations: ArrayVariation[] = [\n  \"Unique\",\n  \"Random\",\n  \"Reversed\",\n  \"Nearly\",\n];\n\nexport const sortingAlgorithmsSelectOptions: SelectOption[] =\n  sortingAlgorithms.map((algorithm) => ({\n    label: algorithm,\n    value: algorithm,\n  }));\n\nexport const arraySizeSelectOptions: SelectOption[] = arraySizeConfigs.map(\n  (arraySizeConfig: ArraySizeConfig) => ({\n    label: arraySizeConfig.arraySize,\n    value: arraySizeConfig.arraySize,\n  })\n);\n\nexport const arrayVariationSelectOptions: SelectOption[] = arrayVariations.map(\n  (arrayVariation: ArrayVariation) => ({\n    label: arrayVariation,\n    value: arrayVariation,\n  })\n);\n\nexport const playSpeedSelectOptions: SelectOption[] = playSpeedConfigs.map(\n  (playSpeedConfig: PlaySpeedConfig) => ({\n    label: `${playSpeedConfig.playSpeed}x`,\n    value: playSpeedConfig.playSpeed,\n  })\n);\n","import styled from \"styled-components\";\nimport { Button } from \"../common/Button\";\n\nexport const Container = styled.div`\n  border: 2px solid #222;\n  display: flex;\n  height: 100%;\n  gap: 0.25rem;\n  position: relative;\n  flex-direction: column;\n`;\n\nexport const GraphContainer = styled.div`\n  padding: 0.25rem;\n  flex: 1;\n`;\n\nexport const AlgorithmSelect = styled.div`\n  padding-bottom: 2rem;\n  padding-right: 2rem;\n  position: absolute;\n  flex-direction: column;\n  display: flex;\n`;\n\nexport const AlgorithmOption = styled(Button)`\n  width: ${({ isActive }) => (isActive ? \"6.75rem\" : \"initial\")};\n`;\n","import React, { useState } from \"react\";\nimport { sortingAlgorithms } from \"../../constants\";\nimport { SortingAlgorithm } from \"../../types\";\nimport { AlgorithmOption, AlgorithmSelect } from \"./style\";\n\ninterface Props {\n  activeAlgorithm: SortingAlgorithm;\n  onChange: (sortingAlgorithm: SortingAlgorithm) => void;\n  disabled: boolean;\n}\n\nexport const AlgorithmSelection: React.FC<Props> = ({\n  activeAlgorithm,\n  disabled,\n  onChange,\n}) => {\n  const [isSelecting, setIsSelecting] = useState<boolean>(false);\n\n  const inActiveAlgorithms = sortingAlgorithms.filter(\n    (algorithm: SortingAlgorithm) => algorithm !== activeAlgorithm\n  );\n\n  const handleMouseLeave = () => setIsSelecting(false);\n  const handleActivateSelection = () => setIsSelecting(!isSelecting);\n  const handleOptionClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    onChange((event.target as any).value);\n    setIsSelecting(false);\n  };\n\n  return (\n    <AlgorithmSelect onMouseLeave={handleMouseLeave}>\n      <AlgorithmOption\n        onClick={disabled ? undefined : handleActivateSelection}\n        isActive\n      >\n        {activeAlgorithm} {!disabled && <i className=\"fas fa-caret-down\"></i>}\n      </AlgorithmOption>\n\n      {!disabled &&\n        isSelecting &&\n        inActiveAlgorithms.map((algorithm: SortingAlgorithm) => (\n          <AlgorithmOption\n            onClick={handleOptionClick}\n            value={algorithm}\n            key={algorithm}\n            isActive={false}\n          >\n            {algorithm}\n          </AlgorithmOption>\n        ))}\n    </AlgorithmSelect>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  height: 100%;\n  display: flex;\n  align-items: flex-end;\n  gap: 2px;\n`;\n\nexport const BarItem = styled.div<{ value: number; color?: string }>`\n  background-color: ${({ color }) => color || \"white\"};\n  height: ${({ value }) => value}%;\n  flex: 1;\n\n  cursor: pointer;\n  :hover {\n    background-color: orange;\n  }\n`;\n","import { Container, BarItem } from \"./styles\";\nimport { Bar } from \"../../types\";\n\ninterface Props {\n  data: Bar[];\n}\n\nexport const Graph: React.FC<Props> = ({ data }) => {\n  return (\n    <Container>\n      {data.map((bar: Bar, index: number) => (\n        <BarItem key={index} value={bar.value} color={bar.color} />\n      ))}\n    </Container>\n  );\n};\n","import { useContext } from \"react\";\n\nimport { AlgorithmSelection } from \"./AlgorithmSelection\";\nimport { Graph } from \"../Graph\";\n\nimport { IsPlayingContext } from \"../../contexts/IsPlayingContext\";\nimport { Bar, SortingAlgorithm } from \"../../types\";\nimport { Container, GraphContainer } from \"./style\";\n\ninterface Props {\n  sortingAlgorithm: SortingAlgorithm;\n  onSelectAlgorithm: (sortingAlgorithm: SortingAlgorithm) => void;\n  sortingSteps: Bar[][];\n  currentStep: number;\n}\n\nexport const Visualizer: React.FC<Props> = ({\n  sortingSteps,\n  currentStep,\n  sortingAlgorithm,\n  onSelectAlgorithm,\n}) => {\n  const isPlaying: boolean = useContext(IsPlayingContext);\n\n  return (\n    <Container>\n      <AlgorithmSelection\n        activeAlgorithm={sortingAlgorithm}\n        onChange={onSelectAlgorithm}\n        disabled={isPlaying}\n      />\n\n      <GraphContainer>\n        <Graph\n          data={sortingSteps[Math.min(currentStep, sortingSteps.length - 1)]}\n        />\n      </GraphContainer>\n    </Container>\n  );\n};\n","import { Bar, SortingAlgorithm } from \"./types\";\n\nconst deepCopyArray = (arrayToCopy: Bar[]) => {\n  const deepCopy: Bar[] = arrayToCopy.map((bar: Bar) => {\n    return { ...bar };\n  });\n\n  return deepCopy;\n};\n\nexport const insertionSort = (arrayToSort: Bar[]): Bar[][] => {\n  const arrayToSortCopy = deepCopyArray(arrayToSort);\n  const sortingSteps = [deepCopyArray(arrayToSort)];\n\n  for (let n = 1; n < arrayToSortCopy.length; n++) {\n    for (let i = n - 1, j = n; j > 0; i--, j--) {\n      const comparisonStep = deepCopyArray(arrayToSortCopy);\n      comparisonStep[i].color = \"Crimson\";\n      comparisonStep[j].color = \"Crimson\";\n      sortingSteps.push(comparisonStep);\n\n      if (arrayToSortCopy[i].value > arrayToSortCopy[j].value) {\n        const temp = arrayToSortCopy[i];\n        arrayToSortCopy[i] = arrayToSortCopy[j];\n        arrayToSortCopy[j] = temp;\n\n        const comparisonStep = deepCopyArray(arrayToSortCopy);\n        comparisonStep[i].color = \"DarkOrange\";\n        comparisonStep[j].color = \"DarkOrange\";\n        sortingSteps.push(comparisonStep);\n      } else {\n        break;\n      }\n    }\n\n    for (let i = 0; i < n; i++) {\n      arrayToSortCopy[i].color = \"SpringGreen\";\n    }\n  }\n\n  arrayToSortCopy[arrayToSort.length - 1].color = \"SpringGreen\";\n  sortingSteps.push([...arrayToSortCopy]);\n  return sortingSteps;\n};\n\nexport const bubbleSort = (arrayToSort: Bar[]): Bar[][] => {\n  const arrayToSortCopy = deepCopyArray(arrayToSort);\n  const sortingSteps = [deepCopyArray(arrayToSort)];\n\n  for (let n = arrayToSortCopy.length; n > 0; n--) {\n    for (let i = 0, j = 1; j < n; i++, j++) {\n      const comparisonStep = deepCopyArray(arrayToSortCopy);\n      comparisonStep[i].color = \"Crimson\";\n      comparisonStep[j].color = \"Crimson\";\n      sortingSteps.push(comparisonStep);\n\n      if (arrayToSortCopy[i].value > arrayToSortCopy[j].value) {\n        const temp = arrayToSortCopy[i];\n        arrayToSortCopy[i] = arrayToSortCopy[j];\n        arrayToSortCopy[j] = temp;\n\n        const swapStep = deepCopyArray(arrayToSortCopy);\n        swapStep[i].color = \"DarkOrange\";\n        swapStep[j].color = \"DarkOrange\";\n        sortingSteps.push(swapStep);\n      }\n    }\n\n    arrayToSortCopy[n - 1].color = \"SpringGreen\";\n  }\n\n  sortingSteps.push([...arrayToSortCopy]);\n  return sortingSteps;\n};\n\nexport const selectionSort = (arrayToSort: Bar[]): Bar[][] => {\n  const arrayToSortCopy = deepCopyArray(arrayToSort);\n  const sortingSteps = [deepCopyArray(arrayToSort)];\n\n  for (let i = 0; i < arrayToSortCopy.length; i++) {\n    let minimum = Infinity;\n    let minimumIndex = i;\n\n    for (let j = i; j < arrayToSortCopy.length; j++) {\n      const currentStep = deepCopyArray(arrayToSortCopy);\n      currentStep[j].color = \"Crimson\";\n      sortingSteps.push(currentStep);\n\n      if (minimum > arrayToSortCopy[j].value) {\n        arrayToSortCopy[minimumIndex] = {\n          ...arrayToSortCopy[minimumIndex],\n          color: \"white\",\n        };\n\n        arrayToSortCopy[j].color = \"DarkOrange\";\n        sortingSteps.push(deepCopyArray(arrayToSortCopy));\n\n        minimumIndex = j;\n        minimum = arrayToSortCopy[j].value;\n      }\n    }\n\n    const temp: Bar = arrayToSortCopy[i];\n    arrayToSortCopy[i] = arrayToSortCopy[minimumIndex];\n    arrayToSortCopy[minimumIndex] = temp;\n    arrayToSortCopy[i].color = \"SpringGreen\";\n\n    sortingSteps.push(deepCopyArray(arrayToSortCopy));\n  }\n\n  return sortingSteps;\n};\n\nexport const mergeSort = (arrayToSort: Bar[]): Bar[][] => {\n  const arrayToSortCopy = deepCopyArray(arrayToSort);\n  const sortingSteps = [deepCopyArray(arrayToSort)];\n\n  const merge = (array: Bar[], low: number, mid: number, high: number) => {\n    const mergedArray = [];\n\n    let fromA: number = low;\n    let toA: number = mid;\n\n    let fromB: number = mid;\n    let toB: number = high;\n\n    let i: number = fromA;\n    let j: number = fromB;\n\n    while (i < toA && j < toB) {\n      const compareStep = deepCopyArray(array);\n      compareStep[i].color = \"Crimson\";\n      compareStep[j].color = \"Crimson\";\n      sortingSteps.push(compareStep);\n\n      const currentA: Bar = array[i];\n      const currentB: Bar = array[j];\n\n      if (currentA.value > currentB.value) {\n        mergedArray.push(currentB);\n        j++;\n      } else {\n        mergedArray.push(currentA);\n        i++;\n      }\n    }\n\n    while (i < toA) {\n      mergedArray.push(array[i]);\n      i++;\n    }\n\n    while (j < toB) {\n      mergedArray.push(array[j]);\n      j++;\n    }\n\n    for (let i = low, j = 0; i < high; i++, j++) {\n      array[i] = mergedArray[j];\n\n      const copyStep = deepCopyArray(array);\n      for (let k = low; k <= i; k++) {\n        copyStep[k].color = \"SpringGreen\";\n      }\n      sortingSteps.push(copyStep);\n    }\n  };\n\n  const sort = (array: Bar[], from: number = 0, to: number = array.length) => {\n    if (to - from <= 1) return;\n\n    const low: number = from;\n    const high: number = to;\n    const mid: number = Math.floor((high + low) / 2);\n\n    sort(array, low, mid);\n    sort(array, mid, high);\n    merge(array, low, mid, high);\n  };\n\n  sort(arrayToSortCopy);\n  return sortingSteps;\n};\n\nexport const quickSort = (arrayToSort: Bar[]): Bar[][] => {\n  const arrayToSortCopy = deepCopyArray(arrayToSort);\n  const sortingSteps = [deepCopyArray(arrayToSort)];\n\n  const partition = (array: Bar[], startIndex: number, endIndex: number) => {\n    const pivot: Bar = array[endIndex];\n    let partitionIndex: number = startIndex;\n\n    const pivotStep: Bar[] = deepCopyArray(array);\n    pivotStep[endIndex].color = \"DarkOrange\";\n    pivotStep[partitionIndex].color = \"Aqua\";\n    sortingSteps.push(pivotStep);\n\n    for (let i = startIndex; i < endIndex; i++) {\n      const currBar: Bar = array[i];\n\n      const compareStep: Bar[] = deepCopyArray(array);\n      compareStep[partitionIndex].color = \"Aqua\";\n      compareStep[endIndex].color = \"DarkOrange\";\n      compareStep[i].color = \"Crimson\";\n      sortingSteps.push(compareStep);\n\n      if (currBar.value <= pivot.value) {\n        if (partitionIndex !== i) {\n          const temp: number = array[partitionIndex].value;\n          array[partitionIndex].value = currBar.value;\n          currBar.value = temp;\n\n          const swapStep: Bar[] = deepCopyArray(array);\n          swapStep[endIndex].color = \"DarkOrange\";\n          swapStep[partitionIndex].color = \"SpringGreen\";\n          swapStep[i].color = \"SpringGreen\";\n          sortingSteps.push(swapStep);\n        }\n\n        partitionIndex++;\n      }\n    }\n\n    const beforePartSwapStep: Bar[] = deepCopyArray(array);\n    beforePartSwapStep[partitionIndex].color = \"Aqua\";\n    beforePartSwapStep[endIndex].color = \"DarkOrange\";\n    sortingSteps.push(beforePartSwapStep);\n\n    const temp: number = array[partitionIndex].value;\n    array[partitionIndex].value = pivot.value;\n    pivot.value = temp;\n\n    const partSwapStep: Bar[] = deepCopyArray(array);\n    partSwapStep[endIndex].color = \"SpringGreen\";\n    partSwapStep[partitionIndex].color = \"SpringGreen\";\n    sortingSteps.push(partSwapStep);\n\n    return partitionIndex;\n  };\n\n  const sort = (array: Bar[], startIndex: number, endIndex: number) => {\n    if (startIndex >= endIndex) {\n      return array;\n    }\n\n    const partitionIndex: number = partition(array, startIndex, endIndex);\n    sort(array, startIndex, partitionIndex - 1);\n    sort(array, partitionIndex + 1, endIndex);\n    return array;\n  };\n\n  const sortedArray: Bar[] = sort(\n    arrayToSortCopy,\n    0,\n    arrayToSortCopy.length - 1\n  );\n\n  sortedArray.forEach((bar: Bar) => {\n    bar.color = \"SpringGreen\";\n  });\n\n  sortingSteps.push(sortedArray);\n\n  return sortingSteps;\n};\n\nexport const generateSoringSteps = (\n  arrayToSort: Bar[],\n  algorithm: SortingAlgorithm = \"Merge\"\n): Bar[][] => {\n  switch (algorithm) {\n    case \"Bubble\":\n      return bubbleSort(arrayToSort);\n    case \"Selection\":\n      return selectionSort(arrayToSort);\n    case \"Insertion\":\n      return insertionSort(arrayToSort);\n    case \"Merge\":\n      return mergeSort(arrayToSort);\n    case \"Quick\":\n      return quickSort(arrayToSort);\n    default:\n      throw Error(\"Algorithm not implemented.\");\n  }\n};\n","import { ArrayVariation, Bar } from \"./types\";\n\nexport const shuffleArray = (arrayToShuffle: any[]): any[] => {\n  const shuffledArray = arrayToShuffle.map(() => null);\n\n  arrayToShuffle.forEach((element, _) => {\n    let randomIndex = Math.round(Math.random() * (arrayToShuffle.length - 1));\n    while (shuffledArray[randomIndex]) {\n      randomIndex = Math.round(Math.random() * (arrayToShuffle.length - 1));\n    }\n\n    shuffledArray[randomIndex] = element;\n  });\n\n  return shuffledArray;\n};\n\nexport const generateRandomGraphData = (\n  arraySize: number,\n  arrayVariation: ArrayVariation\n): Bar[] => {\n  const emptySizedArray: number[] = Array(arraySize).fill(0);\n  const valueMultiplier: number = Math.round(100 / arraySize);\n\n  switch (arrayVariation) {\n    case \"Random\":\n      const randomArray: Bar[] = emptySizedArray.map(() => ({\n        value: Math.max(\n          Math.round(Math.random() * arraySize) * valueMultiplier,\n          3\n        ),\n      }));\n      return randomArray;\n    case \"Unique\":\n      const uniqueArray: Bar[] = emptySizedArray.map((_, index) => ({\n        value: (index + 1) * valueMultiplier,\n      }));\n      return shuffleArray(uniqueArray);\n    case \"Reversed\":\n      const reversedArray: Bar[] = emptySizedArray.map((_, index) => ({\n        value: (index + 1) * valueMultiplier,\n      }));\n      return reversedArray.reverse();\n    case \"Nearly\":\n      const nearlyArray: Bar[] = emptySizedArray.map((_, index) => ({\n        value: (index + 1) * valueMultiplier,\n      }));\n\n      const randomRange: number = Math.min(3, Math.floor(arraySize * 0.25));\n      const randomTotalRange: number = randomRange * 2 + 1;\n\n      nearlyArray.forEach((_, index: number) => {\n        if (Math.random() < 0.8) {\n          let newIndex: number =\n            index +\n            (Math.floor(Math.random() * randomTotalRange) - randomRange);\n\n          if (newIndex >= arraySize) newIndex = arraySize - 1;\n          if (newIndex < 0) newIndex = 0;\n\n          const temp: Bar = nearlyArray[index];\n          nearlyArray[index] = nearlyArray[newIndex];\n          nearlyArray[newIndex] = temp;\n        }\n      });\n\n      return nearlyArray;\n    default:\n      throw Error(\"Not Implemented.\");\n  }\n};\n","import styled from \"styled-components\";\nimport { VisualizerCount } from \"./types\";\n\nexport const Container = styled.div`\n  grid-template-columns: 3fr 8fr;\n  padding: 4rem 7rem;\n  display: grid;\n  gap: 0.25rem;\n  height: 100%;\n`;\n\nexport const Main = styled.main`\n  flex-direction: column;\n  display: flex;\n  gap: 0.25rem;\n  height: 100%;\n`;\n\nexport const VisualizersGrid = styled.div<{ visualizerCount: VisualizerCount }>`\n  grid-gap: 0.25rem;\n  display: grid;\n  height: 100%;\n\n  grid-template-columns: ${({ visualizerCount }) =>\n    visualizerCount >= 2 ? \"1fr 1fr\" : \"1fr\"};\n\n  grid-template-rows: ${({ visualizerCount }) =>\n    visualizerCount === 4 ? \"1fr 1fr\" : \"1fr\"};\n`;\n","import styled, { css } from \"styled-components\";\n\ninterface Props {\n  href: string | undefined;\n  faClassName?: string;\n  label?: string;\n}\n\nconst A = styled.a<{ hasLabel: boolean }>`\n  ${({ hasLabel }) =>\n    hasLabel &&\n    css`\n      i {\n        margin-right: 0.25rem;\n      }\n      padding-bottom: 0.125rem;\n      border-bottom: 1px dashed orange;\n      white-space: pre;\n    `};\n\n  color: white;\n  text-decoration: none;\n\n  :hover {\n    color: orange;\n  }\n`;\n\nexport const Anchor: React.FC<Props> = ({ href, label, faClassName }) => {\n  return (\n    <A href={href} target=\"_blank\" hasLabel={Boolean(label)}>\n      <i className={faClassName || \"fas fa-caret-right\"}></i>\n      {label}\n    </A>\n  );\n};\n","import styled from \"styled-components\";\nimport { SelectOption } from \"../../types\";\nimport { Button, ButtonFlexGroup } from \"../common/Button\";\n\nconst SelectLabel = styled.h2`\n  font-size: 0.8rem;\n  margin-top: 0px;\n  margin-bottom: 0.25rem;\n  font-weight: 400;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n\n  i {\n    margin-right: 0.25rem;\n  }\n`;\n\ninterface Props {\n  title: string;\n  faIcon?: string;\n  options: SelectOption[];\n  activeOption: any;\n  onChange: (optionValue: any) => void;\n  disabled?: boolean;\n}\n\nexport const Select: React.FC<Props> = ({\n  title,\n  faIcon,\n  options,\n  activeOption,\n  disabled = false,\n  onChange,\n}) => {\n  return (\n    <div>\n      <SelectLabel>\n        {faIcon && <i className={faIcon}></i>}\n        {title}\n      </SelectLabel>\n      <ButtonFlexGroup>\n        {options.map((option) => (\n          <Button\n            key={option.value}\n            onClick={() => onChange(option.value)}\n            isActive={activeOption === option.value}\n            disabled={disabled}\n          >\n            {option.label}\n          </Button>\n        ))}\n      </ButtonFlexGroup>\n    </div>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const HeaderContainer = styled.header`\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n`;\n\nexport const TitleH1 = styled.h1`\n  font-family: \"Raleway\";\n  font-weight: 800;\n  font-size: 3.375rem;\n  font-style: italic;\n  margin: 0;\n\n  @media screen and (min-width: 1600px) {\n    font-size: 4rem;\n  }\n`;\n\nexport const SubtitleH2 = styled.h2`\n  font-family: \"Roboto Mono\";\n  font-weight: 400;\n  font-size: 0.8rem;\n  letter-spacing: 0.125rem;\n  margin-top: -0.25rem;\n  margin-left: 0.25rem;\n  margin-bottom: 0;\n  line-height: 1.25rem;\n\n  @media screen and (min-width: 1600px) {\n    font-size: 1rem;\n  }\n`;\n\nexport const HeaderControlsContainer = styled.div`\n  border-bottom: 2px solid #222;\n  padding: 0.25rem 0rem;\n  flex: 0 0 auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 0.5rem;\n`;\n\nexport const Space = styled.div`\n  flex: 1 0 auto;\n`;\n","import { useContext } from \"react\";\nimport {\n  arrayVariationSelectOptions,\n  arraySizeSelectOptions,\n  visualizerCountSelectOptions,\n  playSpeedSelectOptions,\n} from \"../../constants\";\nimport { IsPlayingContext } from \"../../contexts/IsPlayingContext\";\nimport {\n  ArrayVariation,\n  ArraySizeConfig,\n  PlaySpeedConfig,\n  ArraySize,\n} from \"../../types\";\nimport { Anchor } from \"../common/Anchor\";\nimport { Button, ButtonFlexGroup } from \"../common/Button\";\nimport { Select } from \"../Select\";\nimport {\n  HeaderControlsContainer,\n  HeaderContainer,\n  TitleH1,\n  SubtitleH2,\n  Space,\n} from \"./style\";\n\ninterface Props {\n  visualizerCount: number;\n  arraySizeConfig: ArraySizeConfig;\n  arrayVariation: ArrayVariation;\n  playSpeedConfig: PlaySpeedConfig;\n  onRandom: React.MouseEventHandler<HTMLButtonElement>;\n  onReset: React.MouseEventHandler<HTMLButtonElement>;\n  onChangeVisualizerCount: (newVisualizerCount: number) => void;\n  onChangeArraySize: (newArraySize: ArraySize) => void;\n  onChangeArrayVariation: (newArrayVariation: ArrayVariation) => void;\n  onChangePlaySpeed: (newPlaySpeed: number) => void;\n}\n\nexport const Header: React.FC<Props> = ({\n  visualizerCount,\n  arraySizeConfig,\n  arrayVariation,\n  playSpeedConfig,\n  onRandom,\n  onReset,\n  onChangeVisualizerCount,\n  onChangeArraySize,\n  onChangeArrayVariation,\n  onChangePlaySpeed,\n}) => {\n  const isPlaying: boolean = useContext(IsPlayingContext);\n\n  return (\n    <HeaderContainer>\n      <div>\n        <TitleH1>Sorting, Visualized.</TitleH1>\n        <SubtitleH2>\n          <Anchor\n            href=\"https://www.github.com/dwyte/sorting-visualized\"\n            faClassName=\"fas fa-code\"\n          />{\" \"}\n          DEVELOPED BY <Anchor href=\"https://dwyte.github.io\" label=\"DWIGHT\" />\n        </SubtitleH2>\n      </div>\n\n      <Space />\n\n      <HeaderControlsContainer>\n        <Select\n          title=\"Visualizers\"\n          faIcon=\"fas fa-square\"\n          options={visualizerCountSelectOptions}\n          activeOption={visualizerCount}\n          onChange={onChangeVisualizerCount}\n          disabled={isPlaying}\n        />\n        <Select\n          title=\"Variation\"\n          faIcon=\"fas fa-chart-bar\"\n          options={arrayVariationSelectOptions}\n          activeOption={arrayVariation}\n          onChange={onChangeArrayVariation}\n          disabled={isPlaying}\n        />\n        <Select\n          title=\"Length\"\n          faIcon=\"fas fa-sort-amount-up\"\n          options={arraySizeSelectOptions}\n          activeOption={arraySizeConfig.arraySize}\n          onChange={onChangeArraySize}\n          disabled={isPlaying}\n        />\n\n        <Select\n          title=\"Speed\"\n          faIcon=\"fas fa-forward\"\n          options={playSpeedSelectOptions}\n          activeOption={playSpeedConfig.playSpeed}\n          onChange={onChangePlaySpeed}\n          // disabled={isPlaying}\n        />\n      </HeaderControlsContainer>\n      <ButtonFlexGroup>\n        <Button\n          padding=\"large\"\n          onClick={onRandom}\n          disabled={isPlaying}\n          isIconLarge\n          isActive\n        >\n          <i className=\"fas fa-dice-six\"></i>\n          Randomize\n        </Button>\n        <Button padding=\"large\" onClick={onReset} isIconLarge isActive>\n          <i className=\"fas fa-undo\"></i>\n          Reset\n        </Button>\n      </ButtonFlexGroup>\n    </HeaderContainer>\n  );\n};\n","import React, { useEffect, useMemo, useState } from \"react\";\n\nimport { IsPlayingContext } from \"./contexts/IsPlayingContext\";\nimport { PlayerControl } from \"./components/PlayerControl\";\nimport { Visualizer } from \"./components/Visualizer\";\n\nimport {\n  Bar,\n  AllSortingSteps,\n  PlaySpeedConfig,\n  SortingAlgorithm,\n  VisualizerCount,\n  ArraySizeConfig,\n  ArrayVariation,\n  ArraySize,\n} from \"./types\";\n\nimport {\n  arraySizeConfigs,\n  playSpeedConfigs,\n  sortingAlgorithms,\n} from \"./constants\";\n\nimport { generateSoringSteps } from \"./sortingAlgorithms\";\nimport { generateRandomGraphData } from \"./utilities\";\nimport { Container, Main, VisualizersGrid } from \"./styles\";\nimport { Header } from \"./components/Header/Header\";\n\nconst App: React.FC = () => {\n  const [dataToSort, setDataToSort] = useState<Bar[]>([{ value: 100 }]);\n\n  const [allSortingSteps, setAllSortingSteps] =\n    useState<AllSortingSteps | null>(null);\n\n  const [currentStep, setCurrentSortStep] = useState<number>(0);\n\n  const [activeAlgorithms, setActiveAlgorithms] = useState<SortingAlgorithm[]>([\n    \"Merge\",\n  ]);\n\n  const [playSpeedConfig, setPlaySpeedConfig] = useState<PlaySpeedConfig>(\n    playSpeedConfigs[0]\n  );\n\n  const [playTimeout, setPlayTimeout] = useState<NodeJS.Timeout | null>(null);\n\n  const [arraySizeConfig, setArraySizeConfig] = useState<ArraySizeConfig>(\n    arraySizeConfigs[0]\n  );\n\n  const [arrayVariation, setArrayVariation] =\n    useState<ArrayVariation>(\"Unique\");\n\n  const totalSteps: number = useMemo(() => {\n    let maxLength: number = 1;\n    if (allSortingSteps) {\n      activeAlgorithms.forEach((activeAlgorithm: SortingAlgorithm) => {\n        maxLength = Math.max(\n          allSortingSteps[activeAlgorithm]?.length || 1,\n          maxLength\n        );\n      });\n    }\n    return maxLength;\n  }, [allSortingSteps, activeAlgorithms]);\n\n  useEffect(() => {\n    setDataToSort(\n      generateRandomGraphData(arraySizeConfig.actualSize, arrayVariation)\n    );\n  }, [arraySizeConfig, arrayVariation]);\n\n  useEffect(() => {\n    const newAllSortingSteps: any = {};\n    sortingAlgorithms.forEach((algorithm: SortingAlgorithm) => {\n      newAllSortingSteps[algorithm] = generateSoringSteps(\n        dataToSort,\n        algorithm\n      );\n    });\n\n    setAllSortingSteps(newAllSortingSteps as AllSortingSteps);\n    setCurrentSortStep(0);\n  }, [dataToSort]);\n\n  useEffect(() => {\n    if (currentStep === totalSteps - 1) {\n      setPlayTimeout((currentPlayTimeout) => {\n        if (currentPlayTimeout) {\n          clearTimeout(currentPlayTimeout);\n          return null;\n        }\n\n        return currentPlayTimeout;\n      });\n    }\n  }, [currentStep, totalSteps]);\n\n  const changeVisualizerCount = (newVisualizerCount: number) => {\n    setActiveAlgorithms((currentActiveAlgorithms) => {\n      if (newVisualizerCount === 1) {\n        return [currentActiveAlgorithms[0]];\n      } else if (newVisualizerCount === 2) {\n        return [\n          currentActiveAlgorithms[0],\n          currentActiveAlgorithms[1] || \"Merge\",\n        ];\n      } else if (newVisualizerCount === 4) {\n        return [\n          currentActiveAlgorithms[0],\n          currentActiveAlgorithms[1] || \"Merge\",\n          currentActiveAlgorithms[2] || \"Merge\",\n          currentActiveAlgorithms[4] || \"Merge\",\n        ];\n      }\n\n      return currentActiveAlgorithms;\n    });\n  };\n\n  const moveGraphDataStep = (stepSize: number) => {\n    setCurrentSortStep((currentGraphDataStep) => {\n      let newGraphDataStep = currentGraphDataStep + stepSize;\n      if (newGraphDataStep < 0) newGraphDataStep = 0;\n      if (newGraphDataStep > totalSteps - 1) newGraphDataStep = totalSteps - 1;\n\n      return newGraphDataStep;\n    });\n  };\n\n  const handleRandom = () => {\n    setDataToSort(\n      generateRandomGraphData(arraySizeConfig.actualSize, arrayVariation)\n    );\n  };\n\n  const handlePrevious = () => {\n    moveGraphDataStep(-1);\n  };\n\n  const handleNext = () => {\n    moveGraphDataStep(1);\n  };\n\n  const handlePlay = () => {\n    if (!playTimeout && currentStep < totalSteps - 1) {\n      setPlayTimeout(\n        setInterval(\n          () => moveGraphDataStep(playSpeedConfig.playStepSize),\n          playSpeedConfig.playStepIntervalMS\n        )\n      );\n    }\n  };\n\n  const handlePause = () => {\n    if (playTimeout) {\n      clearInterval(playTimeout);\n      setPlayTimeout(null);\n    }\n  };\n\n  const handleReset = () => {\n    handlePause();\n    setCurrentSortStep(0);\n  };\n\n  const handleChangeSlider = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (playTimeout) {\n      clearInterval(playTimeout);\n      setPlayTimeout(null);\n    }\n\n    setCurrentSortStep(parseInt(event.target.value));\n  };\n\n  const handleChangePlaySpeed = (newPlaySpeed: number) => {\n    const newPlaySpeedConfig = playSpeedConfigs.find(\n      (config) => config.playSpeed === newPlaySpeed\n    );\n\n    if (newPlaySpeedConfig) {\n      setPlaySpeedConfig(newPlaySpeedConfig);\n\n      if (playTimeout) {\n        clearInterval(playTimeout);\n        setPlayTimeout(\n          setInterval(\n            () => moveGraphDataStep(newPlaySpeedConfig.playStepSize),\n            newPlaySpeedConfig.playStepIntervalMS\n          )\n        );\n      }\n    }\n  };\n\n  const handleChangeAlgorithm =\n    (visualizerIndex: number) => (sortingAlgorithm: SortingAlgorithm) => {\n      setActiveAlgorithms((currentActiveAlgorithms) => {\n        const stateCopy = [...currentActiveAlgorithms];\n        stateCopy[visualizerIndex] = sortingAlgorithm;\n        return stateCopy;\n      });\n    };\n\n  const handleChangeVisualizerCount = (newVisualizerCount: number) => {\n    changeVisualizerCount(newVisualizerCount);\n  };\n\n  const handleChangeArraySizeConfig = (newArraySize: ArraySize) => {\n    const newArraySizeConfig = arraySizeConfigs.find(\n      (config) => config.arraySize === newArraySize\n    );\n\n    if (newArraySizeConfig) {\n      setArraySizeConfig(newArraySizeConfig);\n    }\n  };\n\n  const handleChangeArrayVariation = (newArrayVariation: ArrayVariation) => {\n    setArrayVariation(newArrayVariation);\n  };\n\n  return (\n    <IsPlayingContext.Provider value={Boolean(playTimeout)}>\n      <Container>\n        <Header\n          arraySizeConfig={arraySizeConfig}\n          arrayVariation={arrayVariation}\n          visualizerCount={activeAlgorithms.length as VisualizerCount}\n          playSpeedConfig={playSpeedConfig}\n          onReset={handleReset}\n          onRandom={handleRandom}\n          onChangePlaySpeed={handleChangePlaySpeed}\n          onChangeVisualizerCount={handleChangeVisualizerCount}\n          onChangeArraySize={handleChangeArraySizeConfig}\n          onChangeArrayVariation={handleChangeArrayVariation}\n        />\n\n        <Main>\n          <VisualizersGrid\n            visualizerCount={activeAlgorithms.length as VisualizerCount}\n          >\n            {activeAlgorithms.map((activeAlgorithm, index: number) => (\n              <Visualizer\n                key={index}\n                sortingAlgorithm={activeAlgorithm}\n                onSelectAlgorithm={handleChangeAlgorithm(index)}\n                currentStep={currentStep}\n                sortingSteps={\n                  allSortingSteps?.[activeAlgorithm] || [dataToSort]\n                }\n              />\n            ))}\n          </VisualizersGrid>\n          <PlayerControl\n            currentStep={currentStep}\n            totalSteps={totalSteps}\n            onPrevious={handlePrevious}\n            onPause={handlePause}\n            onPlay={handlePlay}\n            onNext={handleNext}\n            onChangeSlider={handleChangeSlider}\n          />\n        </Main>\n      </Container>\n    </IsPlayingContext.Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}