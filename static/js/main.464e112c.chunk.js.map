{"version":3,"sources":["sortingAlgorithms.ts","components/Graph/styles.ts","components/Graph/Graph.tsx","constants.ts","components/PlayerControl/styles.ts","components/PlayerControl/PlayerControl.tsx","App.tsx","utilities.ts","reportWebVitals.ts","index.tsx"],"names":["deepCopyArray","arrayToCopy","map","bar","insertionSort","arrayToSort","arrayToSortCopy","sortingSteps","n","length","i","j","comparisonStep","color","push","value","temp","bubbleSort","swapStep","selectionSort","minimum","Infinity","minimumIndex","currentStep","mergeSort","merge","array","low","mid","high","mergedArray","toA","toB","compareStep","currentA","currentB","copyStep","k","sort","from","to","Math","floor","Container","styled","div","BarItem","Graph","data","index","sortingAlgorithms","playSpeedConfigs","playSpeed","playStepSize","playStepIntervalMS","Slider","input","PlayerControl","isPlaying","graphDataStep","graphDataStepsLength","sortingAlgorithm","playSpeedConfig","onRandom","onPrevious","onPlay","onPause","onNext","onSliderChange","onSelectAlgorithm","onSelectPlaySpeed","onChange","disabled","algorithm","onClick","style","width","type","min","max","generateRandomGraphData","arrayToShuffle","shuffledArray","forEach","element","_","randomIndex","round","random","shuffleArray","Array","fill","App","useState","graphData","setGraphData","graphDataSteps","setGraphDataSteps","setGraphDataStep","setSortingAlgorithm","setPlaySpeedConfig","playTimeout","setPlayTimeout","useEffect","Error","generateSoringSteps","moveGraphDataStep","stepSize","currentGraphDataStep","newGraphDataStep","currentPlayTimeout","clearTimeout","Boolean","clearInterval","setInterval","event","parseInt","target","newPlaySpeedConfig","find","config","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.464e112c.chunk.js","sourcesContent":["import { Bar, SortingAlgorithm } from \"./types\";\n\nconst deepCopyArray = (arrayToCopy: Bar[]) => {\n  const deepCopy: Bar[] = arrayToCopy.map((bar: Bar) => {\n    return { ...bar };\n  });\n\n  return deepCopy;\n};\n\nexport const insertionSort = (arrayToSort: Bar[]): Bar[][] => {\n  const arrayToSortCopy = deepCopyArray(arrayToSort);\n  const sortingSteps = [deepCopyArray(arrayToSort)];\n\n  for (let n = 1; n < arrayToSortCopy.length; n++) {\n    for (let i = n - 1, j = n; j > 0; i--, j--) {\n      const comparisonStep = deepCopyArray(arrayToSortCopy);\n      comparisonStep[i].color = \"red\";\n      comparisonStep[j].color = \"red\";\n      sortingSteps.push(comparisonStep);\n\n      if (arrayToSortCopy[i].value > arrayToSortCopy[j].value) {\n        const temp = arrayToSortCopy[i];\n        arrayToSortCopy[i] = arrayToSortCopy[j];\n        arrayToSortCopy[j] = temp;\n\n        const comparisonStep = deepCopyArray(arrayToSortCopy);\n        comparisonStep[i].color = \"orange\";\n        comparisonStep[j].color = \"orange\";\n        sortingSteps.push(comparisonStep);\n      } else {\n        break;\n      }\n    }\n\n    for (let i = 0; i < n; i++) {\n      arrayToSortCopy[i].color = \"green\";\n    }\n  }\n\n  arrayToSortCopy[arrayToSort.length - 1].color = \"green\";\n  sortingSteps.push([...arrayToSortCopy]);\n  return sortingSteps;\n};\n\nexport const bubbleSort = (arrayToSort: Bar[]): Bar[][] => {\n  const arrayToSortCopy = deepCopyArray(arrayToSort);\n  const sortingSteps = [deepCopyArray(arrayToSort)];\n\n  for (let n = arrayToSortCopy.length; n > 0; n--) {\n    for (let i = 0, j = 1; j < n; i++, j++) {\n      const comparisonStep = deepCopyArray(arrayToSortCopy);\n      comparisonStep[i].color = \"red\";\n      comparisonStep[j].color = \"red\";\n      sortingSteps.push(comparisonStep);\n\n      if (arrayToSortCopy[i].value > arrayToSortCopy[j].value) {\n        const temp = arrayToSortCopy[i];\n        arrayToSortCopy[i] = arrayToSortCopy[j];\n        arrayToSortCopy[j] = temp;\n\n        const swapStep = deepCopyArray(arrayToSortCopy);\n        swapStep[i].color = \"orange\";\n        swapStep[j].color = \"orange\";\n        sortingSteps.push(swapStep);\n      }\n    }\n\n    arrayToSortCopy[n - 1].color = \"green\";\n  }\n\n  sortingSteps.push([...arrayToSortCopy]);\n  return sortingSteps;\n};\n\nexport const selectionSort = (arrayToSort: Bar[]): Bar[][] => {\n  const arrayToSortCopy = deepCopyArray(arrayToSort);\n  const sortingSteps = [deepCopyArray(arrayToSort)];\n\n  for (let i = 0; i < arrayToSortCopy.length; i++) {\n    let minimum = Infinity;\n    let minimumIndex = i;\n\n    for (let j = i; j < arrayToSortCopy.length; j++) {\n      const currentStep = deepCopyArray(arrayToSortCopy);\n      currentStep[j].color = \"red\";\n      sortingSteps.push(currentStep);\n\n      if (minimum > arrayToSortCopy[j].value) {\n        arrayToSortCopy[minimumIndex] = {\n          ...arrayToSortCopy[minimumIndex],\n          color: \"white\",\n        };\n\n        arrayToSortCopy[j].color = \"orange\";\n        sortingSteps.push(deepCopyArray(arrayToSortCopy));\n\n        minimumIndex = j;\n        minimum = arrayToSortCopy[j].value;\n      }\n    }\n\n    const temp: Bar = arrayToSortCopy[i];\n    arrayToSortCopy[i] = arrayToSortCopy[minimumIndex];\n    arrayToSortCopy[minimumIndex] = temp;\n    arrayToSortCopy[i].color = \"green\";\n\n    sortingSteps.push(deepCopyArray(arrayToSortCopy));\n  }\n\n  return sortingSteps;\n};\n\nexport const mergeSort = (arrayToSort: Bar[]): Bar[][] => {\n  const arrayToSortCopy = deepCopyArray(arrayToSort);\n  const sortingSteps = [deepCopyArray(arrayToSort)];\n\n  const merge = (array: Bar[], low: number, mid: number, high: number) => {\n    const mergedArray = [];\n\n    let fromA: number = low;\n    let toA: number = mid;\n\n    let fromB: number = mid;\n    let toB: number = high;\n\n    let i: number = fromA;\n    let j: number = fromB;\n\n    while (i < toA && j < toB) {\n      const compareStep = deepCopyArray(array);\n      compareStep[i].color = \"red\";\n      compareStep[j].color = \"red\";\n      sortingSteps.push(compareStep);\n\n      const currentA: Bar = array[i];\n      const currentB: Bar = array[j];\n\n      if (currentA.value > currentB.value) {\n        mergedArray.push(currentB);\n        j++;\n      } else {\n        mergedArray.push(currentA);\n        i++;\n      }\n    }\n\n    while (i < toA) {\n      mergedArray.push(array[i]);\n      i++;\n    }\n\n    while (j < toB) {\n      mergedArray.push(array[j]);\n      j++;\n    }\n\n    for (let i = low, j = 0; i < high; i++, j++) {\n      array[i] = mergedArray[j];\n\n      const copyStep = deepCopyArray(array);\n      for (let k = low; k <= i; k++) {\n        copyStep[k].color = \"green\";\n      }\n      sortingSteps.push(copyStep);\n    }\n  };\n\n  const sort = (array: Bar[], from: number = 0, to: number = array.length) => {\n    if (to - from <= 1) return;\n\n    const low: number = from;\n    const high: number = to;\n    const mid: number = Math.floor((high + low) / 2);\n\n    sort(array, low, mid);\n    sort(array, mid, high);\n    merge(array, low, mid, high);\n  };\n\n  sort(arrayToSortCopy);\n  return sortingSteps;\n};\n\nexport const generateSoringSteps = (\n  arrayToSort: Bar[],\n  algorithm: SortingAlgorithm = \"Merge\"\n): Bar[][] => {\n  switch (algorithm) {\n    case \"Bubble\":\n      return bubbleSort(arrayToSort);\n    case \"Selection\":\n      return selectionSort(arrayToSort);\n    case \"Insertion\":\n      return insertionSort(arrayToSort);\n    case \"Merge\":\n      return mergeSort(arrayToSort);\n    default:\n      throw Error(\"Algorithm not implemented.\");\n  }\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  border: 1px solid #eee;\n  align-items: flex-end;\n  padding: 0.5rem;\n  display: flex;\n  height: 100%;\n`;\n\nexport const BarItem = styled.div<{ value: number; color?: string }>`\n  background-color: ${({ color }) => color || \"white\"};\n  height: ${({ value }) => value}%;\n  margin: 0 1px;\n  flex: 1;\n`;\n","import { Container, BarItem } from \"./styles\";\nimport { Bar } from \"../../types\";\n\ninterface Props {\n  data: Bar[];\n}\n\nexport const Graph: React.FC<Props> = ({ data }) => {\n  return (\n    <Container>\n      {data.map((bar: Bar, index: number) => (\n        <BarItem key={index} value={bar.value} color={bar.color} />\n      ))}\n    </Container>\n  );\n};\n","import { PlaySpeed, PlaySpeedConfig, SortingAlgorithm } from \"./types\";\n\nexport const sortingAlgorithms: SortingAlgorithm[] = [\n  \"Merge\",\n  \"Bubble\",\n  \"Insertion\",\n  \"Selection\",\n];\n\nexport const playSpeeds: PlaySpeed[] = [1, 2, 3, 4, 5];\n\nexport const playSpeedConfigs: PlaySpeedConfig[] = [\n  {\n    playSpeed: 1,\n    playStepSize: 1,\n    playStepIntervalMS: 500,\n  },\n  {\n    playSpeed: 2,\n    playStepSize: 1,\n    playStepIntervalMS: 200,\n  },\n  {\n    playSpeed: 3,\n    playStepSize: 1,\n    playStepIntervalMS: 60,\n  },\n  {\n    playSpeed: 4,\n    playStepSize: 2,\n    playStepIntervalMS: 24,\n  },\n  {\n    playSpeed: 5,\n    playStepSize: 5,\n    playStepIntervalMS: 5,\n  },\n];\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n`;\n\nexport const Slider = styled.input`\n  flex: 1;\n`;\n","import { playSpeedConfigs, sortingAlgorithms } from \"../../constants\";\nimport { PlaySpeedConfig, SortingAlgorithm } from \"../../types\";\nimport { Slider, Container } from \"./styles\";\n\ninterface Props {\n  isPlaying: boolean;\n  graphDataStep: number;\n  graphDataStepsLength: number;\n  sortingAlgorithm: SortingAlgorithm;\n  playSpeedConfig: PlaySpeedConfig;\n  onRandom: React.MouseEventHandler<HTMLButtonElement>;\n  onPrevious: React.MouseEventHandler<HTMLButtonElement>;\n  onPlay: React.MouseEventHandler<HTMLButtonElement>;\n  onPause: React.MouseEventHandler<HTMLButtonElement>;\n  onNext: React.MouseEventHandler<HTMLButtonElement>;\n  onSliderChange: React.ChangeEventHandler<HTMLInputElement>;\n  onSelectAlgorithm: React.ChangeEventHandler<HTMLSelectElement>;\n  onSelectPlaySpeed: React.ChangeEventHandler<HTMLSelectElement>;\n}\n\nexport const PlayerControl: React.FC<Props> = ({\n  isPlaying,\n  graphDataStep,\n  graphDataStepsLength,\n  sortingAlgorithm,\n  playSpeedConfig,\n  onRandom,\n  onPrevious,\n  onPlay,\n  onPause,\n  onNext,\n  onSliderChange,\n  onSelectAlgorithm,\n  onSelectPlaySpeed,\n}) => {\n  return (\n    <Container>\n      <select\n        value={sortingAlgorithm}\n        onChange={onSelectAlgorithm}\n        disabled={isPlaying}\n      >\n        {sortingAlgorithms.map((algorithm: SortingAlgorithm) => (\n          <option key={algorithm} value={algorithm}>\n            {algorithm} Sort\n          </option>\n        ))}\n      </select>\n\n      <button onClick={onRandom} disabled={isPlaying}>\n        Random\n      </button>\n      <button onClick={onPrevious} disabled={isPlaying}>\n        {\"<\"}\n      </button>\n      {isPlaying && <button onClick={onPause}>Pause</button>}\n      {!isPlaying && <button onClick={onPlay}>Play</button>}\n      <button onClick={onNext} disabled={isPlaying}>\n        {\">\"}\n      </button>\n\n      <select\n        value={playSpeedConfig.playSpeed}\n        onChange={onSelectPlaySpeed}\n        disabled={isPlaying}\n      >\n        {playSpeedConfigs.map((playSpeedConfigs: PlaySpeedConfig) => (\n          <option\n            key={playSpeedConfigs.playSpeed}\n            value={playSpeedConfigs.playSpeed}\n          >\n            {playSpeedConfigs.playSpeed}x\n          </option>\n        ))}\n      </select>\n\n      <button style={{ width: \"50px\" }} disabled>\n        {graphDataStep}\n      </button>\n\n      <Slider\n        type=\"range\"\n        min={0}\n        max={graphDataStepsLength - 1}\n        value={graphDataStep}\n        onChange={onSliderChange}\n      />\n    </Container>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { generateSoringSteps } from \"./sortingAlgorithms\";\nimport { Graph } from \"./components/Graph\";\nimport { Bar, PlaySpeedConfig, SortingAlgorithm } from \"./types\";\nimport { shuffleArray } from \"./utilities\";\nimport { PlayerControl } from \"./components/PlayerControl\";\nimport { playSpeedConfigs } from \"./constants\";\n\nconst Container = styled.div`\n  padding: 0.5rem;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst generateRandomGraphData = () =>\n  shuffleArray(\n    Array(100)\n      .fill(0)\n      .map((_, index) => ({\n        value: index + 1,\n      }))\n  );\n\nconst App = () => {\n  const [graphData, setGraphData] = useState<Bar[]>(generateRandomGraphData());\n  const [graphDataSteps, setGraphDataSteps] = useState<Bar[][]>([graphData]);\n  const [graphDataStep, setGraphDataStep] = useState<number>(0);\n  const [sortingAlgorithm, setSortingAlgorithm] = useState<SortingAlgorithm>(\n    \"Merge\"\n  );\n\n  const [playSpeedConfig, setPlaySpeedConfig] = useState<PlaySpeedConfig>(\n    playSpeedConfigs[0]\n  );\n\n  const [playTimeout, setPlayTimeout] = useState<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    setGraphDataSteps(generateSoringSteps(graphData, sortingAlgorithm));\n    setGraphDataStep(0);\n  }, [graphData, sortingAlgorithm]);\n\n  const moveGraphDataStep = (stepSize: number) => {\n    setGraphDataStep((currentGraphDataStep) => {\n      let newGraphDataStep = currentGraphDataStep + stepSize;\n      if (newGraphDataStep < 0) newGraphDataStep = 0;\n      if (newGraphDataStep > graphDataSteps.length - 1)\n        newGraphDataStep = graphDataSteps.length - 1;\n\n      return newGraphDataStep;\n    });\n  };\n\n  const handleRandom = () => {\n    setGraphData(generateRandomGraphData());\n  };\n\n  const handlePrevious = () => {\n    moveGraphDataStep(-1);\n  };\n\n  const handleNext = () => {\n    moveGraphDataStep(1);\n  };\n\n  const handlePlay = () => {\n    if (!playTimeout) {\n      setPlayTimeout(\n        setInterval(\n          () => moveGraphDataStep(playSpeedConfig.playStepSize),\n          playSpeedConfig.playStepIntervalMS\n        )\n      );\n    }\n  };\n\n  const handlePause = () => {\n    if (playTimeout) {\n      clearInterval(playTimeout);\n      setPlayTimeout(null);\n    }\n  };\n\n  useEffect(() => {\n    if (graphDataStep === graphDataSteps.length - 1) {\n      setPlayTimeout((currentPlayTimeout) => {\n        if (currentPlayTimeout) {\n          clearTimeout(currentPlayTimeout);\n          return null;\n        }\n\n        return currentPlayTimeout;\n      });\n    }\n  }, [graphDataStep, graphDataSteps.length]);\n\n  const handleSliderChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setGraphDataStep(parseInt(event.target.value));\n  };\n\n  const handleSelectAlgorithm = (\n    event: React.ChangeEvent<HTMLSelectElement>\n  ) => {\n    setSortingAlgorithm(event.target.value as SortingAlgorithm);\n  };\n\n  const handleSelectPlaySpeed = (\n    event: React.ChangeEvent<HTMLSelectElement>\n  ) => {\n    const newPlaySpeedConfig = playSpeedConfigs.find(\n      (config) => config.playSpeed === parseInt(event.target.value)\n    );\n\n    if (newPlaySpeedConfig) {\n      setPlaySpeedConfig(newPlaySpeedConfig);\n    }\n  };\n\n  return (\n    <Container>\n      <Graph data={graphDataSteps[graphDataStep]} />\n      <PlayerControl\n        playSpeedConfig={playSpeedConfig}\n        sortingAlgorithm={sortingAlgorithm}\n        isPlaying={Boolean(playTimeout)}\n        graphDataStep={graphDataStep}\n        graphDataStepsLength={graphDataSteps.length}\n        onPrevious={handlePrevious}\n        onPause={handlePause}\n        onPlay={handlePlay}\n        onNext={handleNext}\n        onRandom={handleRandom}\n        onSliderChange={handleSliderChange}\n        onSelectAlgorithm={handleSelectAlgorithm}\n        onSelectPlaySpeed={handleSelectPlaySpeed}\n      />\n    </Container>\n  );\n};\n\nexport default App;\n","export const shuffleArray = (arrayToShuffle: any[]): any[] => {\n  const shuffledArray = arrayToShuffle.map(() => null);\n\n  arrayToShuffle.forEach((element, _) => {\n    let randomIndex = Math.round(Math.random() * (arrayToShuffle.length - 1));\n    while (shuffledArray[randomIndex]) {\n      randomIndex = Math.round(Math.random() * (arrayToShuffle.length - 1));\n    }\n\n    shuffledArray[randomIndex] = element;\n  });\n\n  return shuffledArray;\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}